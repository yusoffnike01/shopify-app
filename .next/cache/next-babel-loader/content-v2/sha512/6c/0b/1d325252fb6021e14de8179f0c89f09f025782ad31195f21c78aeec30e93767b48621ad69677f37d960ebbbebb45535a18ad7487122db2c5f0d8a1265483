{"ast":null,"code":"var _jsxFileName = \"/home/tengku/sample-shopify-app/components/ResourceList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport gql from 'graphql-tag';\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport { useQuery } from '@apollo/react-hooks';\nimport store from 'store-js';\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction ProductList() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_PRODUCTS_BY_ID, {\n    variables: {\n      ids: store.get('ids')\n    }\n  });\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return __jsx(React.Fragment, null, __jsx(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(ResourceList, {\n    showHeader: true,\n    resourceName: {\n      singular: 'Product',\n      plural: 'Products'\n    },\n    items: data.nodes,\n    renderItem: item => {\n      const media = __jsx(Thumbnail, {\n        source: item.images.edges[0] ? item.images.edges[0].node.originalSrc : '',\n        alt: item.images.edges[0] ? item.images.edges[0].altText : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }\n      });\n\n      const price = item.variants.edges[0].node.price;\n      return __jsx(ResourceList.Item, {\n        id: item.id,\n        media: media,\n        accessibilityLabel: `View details for ${item.title}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }\n      }, __jsx(Stack, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }\n      }, __jsx(Stack.Item, {\n        fill: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 19\n        }\n      }, __jsx(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }\n      }, __jsx(TextStyle, {\n        variation: \"strong\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 23\n        }\n      }, item.title))), __jsx(Stack.Item, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 19\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }\n      }, \"$\", price))));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default ProductList;","map":{"version":3,"sources":["/home/tengku/sample-shopify-app/components/ResourceList.js"],"names":["gql","Card","ResourceList","Stack","TextStyle","Thumbnail","useQuery","store","GET_PRODUCTS_BY_ID","ProductList","loading","error","data","variables","ids","get","singular","plural","nodes","item","media","images","edges","node","originalSrc","altText","price","variants","id","title"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport {Card, ResourceList, Stack, TextStyle, Thumbnail} from '@shopify/polaris';\nimport { useQuery } from '@apollo/react-hooks';\nimport store from 'store-js';\n\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction ProductList() {\n  const {loading, error, data} = useQuery(GET_PRODUCTS_BY_ID, {\n    variables: {\n      ids: store.get('ids')\n    }\n  })\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n  return (\n    <>\n      <Card>\n        <ResourceList\n          showHeader\n          resourceName={{ singular: 'Product', plural: 'Products' }}\n          items={data.nodes}\n          renderItem={item => {\n            const media = (\n              <Thumbnail\n                source={\n                  item.images.edges[0] ? item.images.edges[0].node.originalSrc : ''\n                }\n                alt={\n                  item.images.edges[0] ? item.images.edges[0].altText : ''\n                }\n              />\n            );\n            const price = item.variants.edges[0].node.price;\n            return (\n              <ResourceList.Item\n                id={item.id}\n                media={media}\n                accessibilityLabel={`View details for ${item.title}`}\n              >\n                <Stack>\n                  <Stack.Item fill>\n                    <h3>\n                      <TextStyle variation='strong'>\n                        {item.title}\n                      </TextStyle>\n                    </h3>\n                  </Stack.Item>\n                  <Stack.Item>\n                    <p>${price}</p>\n                  </Stack.Item>\n                </Stack>\n              </ResourceList.Item>\n            )\n          }}\n        />\n      </Card>\n    </>\n  )\n}\n\nexport default ProductList;"]},"metadata":{},"sourceType":"module"}