import _regeneratorRuntime from "@babel/runtime/regenerator";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import { Method, Header } from '@shopify/network';
import { WebhookHeader } from "./types.mjs";
export var ApiVersion;

(function (ApiVersion) {
  ApiVersion["April19"] = "2019-04";
  ApiVersion["July19"] = "2019-07";
  ApiVersion["October19"] = "2019-10";
  ApiVersion["January20"] = "2020-01";
  ApiVersion["April20"] = "2020-04";
  ApiVersion["July20"] = "2020-07";
  ApiVersion["October20"] = "2020-10";
  ApiVersion["Unstable"] = "unstable";
  ApiVersion["Unversioned"] = "unversioned";
})(ApiVersion || (ApiVersion = {}));

export var DeliveryMethod;

(function (DeliveryMethod) {
  DeliveryMethod["Http"] = "http";
  DeliveryMethod["EventBridge"] = "eventbridge";
})(DeliveryMethod || (DeliveryMethod = {}));

export function registerWebhook(_x) {
  return _registerWebhook.apply(this, arguments);
}

function _registerWebhook() {
  _registerWebhook = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
    var _headers;

    var address, topic, accessToken, shop, apiVersion, _ref$deliveryMethod, deliveryMethod, response, result;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            address = _ref.address, topic = _ref.topic, accessToken = _ref.accessToken, shop = _ref.shop, apiVersion = _ref.apiVersion, _ref$deliveryMethod = _ref.deliveryMethod, deliveryMethod = _ref$deliveryMethod === void 0 ? DeliveryMethod.Http : _ref$deliveryMethod;
            _context.next = 3;
            return fetch("https://".concat(shop, "/admin/api/").concat(apiVersion, "/graphql.json"), {
              method: Method.Post,
              body: buildQuery(topic, address, deliveryMethod),
              headers: (_headers = {}, _defineProperty(_headers, WebhookHeader.AccessToken, accessToken), _defineProperty(_headers, Header.ContentType, 'application/graphql'), _headers)
            });

          case 3:
            response = _context.sent;
            _context.next = 6;
            return response.json();

          case 6:
            result = _context.sent;
            return _context.abrupt("return", {
              success: isSuccess(result, deliveryMethod),
              result: result
            });

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _registerWebhook.apply(this, arguments);
}

function isSuccess(result, deliveryMethod) {
  switch (deliveryMethod) {
    case DeliveryMethod.Http:
      return Boolean(result.data && result.data.webhookSubscriptionCreate && result.data.webhookSubscriptionCreate.webhookSubscription);

    case DeliveryMethod.EventBridge:
      return Boolean(result.data && result.data.eventBridgeWebhookSubscriptionCreate && result.data.eventBridgeWebhookSubscriptionCreate.webhookSubscription);
  }
}

function buildQuery(topic, address, deliveryMethod) {
  var mutationName;
  var webhookSubscriptionArgs;

  switch (deliveryMethod) {
    case DeliveryMethod.Http:
      mutationName = 'webhookSubscriptionCreate';
      webhookSubscriptionArgs = "{callbackUrl: \"".concat(address, "\"}");
      break;

    case DeliveryMethod.EventBridge:
      mutationName = 'eventBridgeWebhookSubscriptionCreate';
      webhookSubscriptionArgs = "{arn: \"".concat(address, "\"}");
      break;
  }

  return "\n    mutation webhookSubscriptionCreate {\n      ".concat(mutationName, "(topic: ").concat(topic, ", webhookSubscription: ").concat(webhookSubscriptionArgs, ") {\n        userErrors {\n          field\n          message\n        }\n        webhookSubscription {\n          id\n        }\n      }\n    }\n  ");
}