import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import { createHmac } from 'crypto';
import safeCompare from 'safe-compare';
import bodyParser from 'koa-bodyparser';
import mount from 'koa-mount';
import compose from 'koa-compose';
import { StatusCode } from '@shopify/network';
import { WebhookHeader } from "./types.mjs";
export function receiveWebhook(_ref) {
  var secret = _ref.secret,
      path = _ref.path,
      _ref$onReceived = _ref.onReceived,
      onReceived = _ref$onReceived === void 0 ? noop : _ref$onReceived;

  function receiveWebhookMiddleware(_x, _x2) {
    return _receiveWebhookMiddleware.apply(this, arguments);
  }

  function _receiveWebhookMiddleware() {
    _receiveWebhookMiddleware = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx, next) {
      var hmac, topic, domain, rawBody, generatedHash, graphqlTopic;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              hmac = ctx.get(WebhookHeader.Hmac);
              topic = ctx.get(WebhookHeader.Topic);
              domain = ctx.get(WebhookHeader.Domain);
              rawBody = ctx.request.rawBody;
              generatedHash = createHmac('sha256', secret).update(rawBody, 'utf8').digest('base64');
              graphqlTopic = topic.toUpperCase().replace(/\//g, '_');

              if (!safeCompare(generatedHash, hmac)) {
                _context.next = 15;
                break;
              }

              ctx.res.statusCode = StatusCode.Accepted;
              ctx.state.webhook = {
                topic: graphqlTopic,
                domain: domain,
                payload: JSON.parse(rawBody)
              };
              _context.next = 11;
              return onReceived(ctx);

            case 11:
              _context.next = 13;
              return next();

            case 13:
              _context.next = 16;
              break;

            case 15:
              ctx.res.statusCode = StatusCode.Forbidden;

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _receiveWebhookMiddleware.apply(this, arguments);
  }

  var middleware = compose([bodyParser(), receiveWebhookMiddleware]);
  return path ? mount(path, middleware) : middleware;
}

function noop() {}