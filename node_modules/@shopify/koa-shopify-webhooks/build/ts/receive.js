import { createHmac } from 'crypto';
import safeCompare from 'safe-compare';
import bodyParser from 'koa-bodyparser';
import mount from 'koa-mount';
import compose from 'koa-compose';
import { StatusCode } from '@shopify/network';
import { WebhookHeader } from './types';
export function receiveWebhook({ secret, path, onReceived = noop, }) {
    async function receiveWebhookMiddleware(ctx, next) {
        const hmac = ctx.get(WebhookHeader.Hmac);
        const topic = ctx.get(WebhookHeader.Topic);
        const domain = ctx.get(WebhookHeader.Domain);
        const { rawBody } = ctx.request;
        const generatedHash = createHmac('sha256', secret)
            .update(rawBody, 'utf8')
            .digest('base64');
        const graphqlTopic = topic.toUpperCase().replace(/\//g, '_');
        if (safeCompare(generatedHash, hmac)) {
            ctx.res.statusCode = StatusCode.Accepted;
            ctx.state.webhook = {
                topic: graphqlTopic,
                domain,
                payload: JSON.parse(rawBody),
            };
            await onReceived(ctx);
            await next();
        }
        else {
            ctx.res.statusCode = StatusCode.Forbidden;
        }
    }
    const middleware = compose([bodyParser(), receiveWebhookMiddleware]);
    return path ? mount(path, middleware) : middleware;
}
function noop() { }
